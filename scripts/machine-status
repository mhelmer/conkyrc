#!/usr/bin/env python2.7
import re
import subprocess
import os

DEVNULL = open(os.devnull, 'wb')

machines_env = os.environ['MACHINES']
conky_home = os.environ['CONKY_HOME']
conky_scripts = conky_home + '/scripts'

with open(conky_home + '/templates/machine-status', "r") as f:
    template = f.read()

template = template.splitlines()

# print the header
print template[0]

template = template[1]

prog_host = re.compile('\<HOST\>')
prog_ping = re.compile('\<PING\>')
prog_load = re.compile('\<LOAD\>')
prog_top = re.compile('\<TOP\>')

for machine in machines_env.split(':'):
    status_line = prog_host.sub(machine.upper(), template)
    ping_ret = subprocess.call(['ping', "-c1", "-q", machine],
                               stdout=DEVNULL,
                               stderr=DEVNULL)

    if ping_ret == 0:
        status_line = prog_ping.sub('YES', status_line)

        try:
            machine_status = subprocess.check_output([
                conky_scripts + '/conky_ssh',
                machine,
                conky_scripts + '/machine-status-remote',
            ]).splitlines()

            load = machine_status[0].split('loadavg: ')[1].split()[0]
            status_line = prog_load.sub(load, status_line)

            top = machine_status[1].split('top: ')[1].split()
            status_line = prog_top.sub("%s: %s @ %.1f%%" % (
                top[1], top[11], float(top[8])
            ), status_line)
        except subprocess.CalledProcessError:
            status_line = re.sub('\<LOAD\>.*\<TOP\>', 'ERROR', status_line)
    else:
        status_line = re.sub('\<PING\>.*', 'NO', status_line)

    print status_line
